static_resources:
  listeners:
    - address:
        socket_address:
          address: 0.0.0.0
          port_value: 8800
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: ingress_http
                # Structured access log in JSON format
                access_log:
                  - name: envoy.access_loggers.stderr
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StderrAccessLog
                      log_format:
                        json_format:
                          type: "request"
                          protocol: "%PROTOCOL%"
                          method: "%REQ(:METHOD)%"
                          path: "%REQ(:path)%"
                          responseCode: "%RESPONSE_CODE%"
                          duration: "%DURATION%"
                          CONNECTION_TERMINATION_DETAILS: "%CONNECTION_TERMINATION_DETAILS%"
                          UPSTREAM_CLUSTER: "%UPSTREAM_CLUSTER%"
                          UPSTREAM_HOST: "%UPSTREAM_HOST%"
                          UPSTREAM_LOCAL_ADDRESS: "%UPSTREAM_LOCAL_ADDRESS%"
                          UPSTREAM_TRANSPORT_FAILURE_REASON: "%UPSTREAM_TRANSPORT_FAILURE_REASON%"
                        omit_empty_values: True

                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains:
                        - "*"
                      # domains: ["test1.com"]
                      routes:
                        - match:
                            prefix: "/api/v1"
                          route:
                            cluster: server1
                        - match:
                            prefix: "/api/v2"
                          route:
                            cluster: server2

                # Don't forget: No error message but also no functionality if missing
                http_filters:
                  - name: envoy.filters.http.jwt_authn
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                      providers:
                        example-jwt:
                          # issuer: "cloudphyisican.com"
                          # audience: "cp.audience"
                          forward: true
                          forward_payload_header: x-jwt-payload

                          local_jwks:
                            inline_string: '{"keys":[{"kty":"RSA","use":"sig","n":"AKLZnXuPrcIYP7kHqg6ekBSVs4rVQOzMp-ZOWu2zRZkJ6IdWdQQCmIHI9Qakgm0W3wzYGmRAon_a0OohHpac32d7oWYqQ6uVtnMrEsNTEw8nH1OnH-IfcF0bO2sE4yBC7MLAnMA01PxOsekUPmVT8J1aNQ7ZHtZv3b9LZsO1NUcb-gAKBcMzyV7tbw3nTdRnXpF0q7hcYwfWaAaqSCJvFcF4HnsYY7KtgKwOgrQovGmX3NUi8l9Adt_yx8ocK_qGm5glP4-vwjHPHQ-X4HJbUz6BVBNm58exYeYV83SxoO48y-fGu6qVM2CopeiEUbYViIDi5CzCI8H7CzgcEKv2w7Q5AR_DDGDllzeDpGRPQYwjuHhPGgHAnNEHBw7Ie73VBRTnFTcZjKQ6OJKoEJ9iWH9Y1XNE4AJstuezB81UDNGz3qUrYbX1UEwhtuzCieME1eCRP5GsHZIrwpugR_t_f-zdK1bTTJeLl5qEP49a5IbcynIjuCF2TTAl61lSbWcynQ","e":"AQAB"}]}'

                          # https://github.com/envoyproxy/envoy/issues/19245
                          # remote_jwks:
                          #   http_uri:
                          #     uri: http://localhost:4000/.well-known/jwks.json
                          #     cluster: server1
                          #     timeout: 5s
                          #   cache_duration:
                          #     seconds: 300
                      rules:
                        - match:
                            prefix: "/api/v2"
                          requires:
                            provider_name: "example-jwt"

                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      inline_code: |


                        -- Json Parsing based on https://gist.github.com/tylerneylon/59f4bcf316be525b30ab
                        -- See modified script on https://gist.github.com/inaiat/02bf5d11732d8e4d7b7546399a3a49af
                        -- local a='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'local function b(c)if c>64 then error("Bad number "..c.." to convert to binary")end;local d=tonumber(c)local e=''for f=5,0,-1 do local g=2^f;if d>=g then e=e..'1'd=d-g else e=e..'0'end end;return e end;local function h(e)return tonumber(e,2)end;local function i(j)local k=''local l=''for f=1,string.len(j)do local m,n=string.find(a,string.sub(j,f,f))if m==nil then error("Bad base64 character "..string.sub(j,f,f))end;k=k..b(m-1)end;for f=1,string.len(k),8 do l=l..string.char(h(string.sub(k,f,f+7)))end;return l end;local o={}local function p(q,r,s,t)r=r+#q:match('^%s*',r)if q:sub(r,r)~=s then if t then error('Expected '..s..' near position '..r)end;return r,false end;return r+1,true end;local function u(q,r,v)v=v or''local w='End of input found while parsing string.'if r>#q then error(w)end;local x=q:sub(r,r)if x=='"'then return v,r+1 end;if x~='\\'then return u(q,r+1,v..x)end;local y={b='\b',f='\f',n='\n',r='\r',t='\t'}local z=q:sub(r+1,r+1)if not z then error(w)end;return u(q,r+2,v..(y[z]or z))end;local function A(q,r)local B=q:match('^-?%d+%.?%d*[eE]?[+-]?%d*',r)local v=tonumber(B)if not v then error('Error parsing number at position '..r..'.')end;return v,r+#B end;o.null={}function o.parse(q,r,C)r=r or 1;if r>#q then error('Reached unexpected end of input.')end;local r=r+#q:match('^%s*',r)local D=q:sub(r,r)if D=='{'then local E,F,G={},true,true;r=r+1;while true do F,r=o.parse(q,r,'}')if F==nil then return E,r end;if not G then error('Comma missing between object items.')end;r=p(q,r,':',true)E[F],r=o.parse(q,r)r,G=p(q,r,',')end elseif D=='['then local H,v,G={},true,true;r=r+1;while true do v,r=o.parse(q,r,']')if v==nil then return H,r end;if not G then error('Comma missing between array items.')end;H[#H+1]=v;r,G=p(q,r,',')end elseif D=='"'then return u(q,r+1)elseif D=='-'or D:match('%d')then return A(q,r)elseif D==C then return nil,r+1 else local I={['true']=true,['false']=false,['null']=o.null}for J,K in pairs(I)do local L=r+#J-1;if q:sub(r,L)==J then return K,L+1 end end;local M='position '..r..': '..q:sub(r,r+10)error('Invalid json syntax starting at '..M)end end;local function decode_jwt(O)local f=0;local P={}for Q in(O..'.'):gmatch("(.-)%.")do P[f]=i(Q)f=f+1 end;local R=o.parse(P[0])local S=o.parse(P[1])return{head=R,claims=S}end


                        b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
                        function base64decode(data)
                            data = string.gsub(data, '[^'..b..'=]', '')
                            return (data:gsub('.', function(x)
                                if (x == '=') then return '' end
                                local r,f='',(b:find(x)-1)
                                for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
                                return r;
                            end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
                                if (#x ~= 8) then return '' end
                                local c=0
                                for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
                                return string.char(c)
                            end))
                        end

                        
                        function envoy_on_request(request_handle)
                          request_handle:logInfo("envoy request: trying to get jwt token")
                          local headers = request_handle:headers()
                          local token = headers:get("x-jwt-payload")
                          if token == nil then
                              headers:add("jwt","headernotfound")
                              request_handle:logWarn("there is is no jwt token")
                          else
                            local decoded = base64decode(token)
                            -- array starts from 1
                            -- sub string to extract only email
                            -- as email is the first value of object (which is a string in LAU)
                            request_handle:logInfo(decoded:sub(11,22))

                            -- request_handle:logInfo(type(decoded))

                          
                            request_handle:headers():add("x-user-email", decoded:sub(11,22))

                            -- remove Authorization header and x-jwt-payload header
                            request_handle:headers():remove("Authorization")
                            request_handle:headers():remove("x-jwt-payload")
                          end
                        end

                  - name: envoy.filters.http.router
                    typed_config: {}

  clusters:
    - name: server1
      connect_timeout: 0.25s
      # https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/cluster.proto#enum-cluster-discoverytype
      #    type: STRICT_DNS
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      protocol_selection: USE_DOWNSTREAM_PROTOCOL
      health_checks:
        always_log_health_check_failures: true
        timeout: 0.1s
        interval: 3s
        unhealthy_threshold: 3
        healthy_threshold: 1
        http_health_check:
          path: /health
      dns_lookup_family: V4_ONLY
      load_assignment:
        cluster_name: server1
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 192.168.0.102
                      port_value: 4000

    - name: server2
      connect_timeout: 0.25s
      # https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/cluster.proto#enum-cluster-discoverytype
      #    type: STRICT_DNS
      type: LOGICAL_DNS
      health_checks:
        always_log_health_check_failures: true
        timeout: 0.1s
        interval: 3s
        unhealthy_threshold: 3
        healthy_threshold: 1
        http_health_check:
          path: /health
      dns_lookup_family: V4_ONLY
      load_assignment:
        cluster_name: server2
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 192.168.0.102
                      port_value: 4001

admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8081
